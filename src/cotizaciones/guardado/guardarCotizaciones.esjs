importar {
  escribirRuta,
  existeRuta,
  leerRuta,
} desde '@/utils/rutas.esjs'
importar { format, isSameDay, parse } desde 'date-fns'
importar { collect } desde 'collect.js'

exportar asincrono funcion guardarCotizaciones(cotizaciones, fecha) {
  const fechaConBarra = format(fecha, 'yyyy/MM/dd')

  const existe = esperar existeRuta(`/cotizaciones/${fechaConBarra}`)

  const hoy = crear Fecha()

  const esHoy = isSameDay(fecha, hoy)

  si (existe && !esHoy) {
    retornar
  }

  escribirRuta(`/cotizaciones/${fechaConBarra}`, cotizaciones)

  cotizaciones.mapear((cotizacion) => {
    escribirRuta(
      `/cotizaciones/${cotizacion.moneda.toLowerCase()}/${fechaConBarra}`,
      cotizacion,
    )
  })

  collect(cotizaciones)
    .groupBy('moneda')
    .mapear((cotizaciones, moneda) => {
      guardarHistoricoPorMoneda(moneda.aMinusculas(), cotizaciones, fecha)
    })

  guardarHistorico(cotizaciones, fecha)
}

funcion guardarHistoricoPorMoneda(moneda, cotizaciones, fecha) {
  const actual = leerRuta(`/cotizaciones/${moneda}`)

  const actualSinItemsConMismaFecha = actual.filtrar((item) => {
    const esMismaFecha = isSameDay(
      fecha,
      parse(item.fecha, 'yyyy-MM-dd', crear Fecha()),
    )

    retornar !esMismaFecha
  })

  const nuevo = [...actualSinItemsConMismaFecha, ...cotizaciones]

  escribirRuta(`/cotizaciones/${moneda}`, nuevo)
}

funcion guardarHistorico(cotizaciones, fecha) {
  const actual = leerRuta(`/cotizaciones`)

  const actualSinItemsConMismaFecha = actual.filtrar((item) => {
    const esMismaFecha = isSameDay(
      fecha,
      parse(item.fecha, 'yyyy-MM-dd', crear Fecha()),
    )

    retornar !esMismaFecha
  })

  const nuevo = [...actualSinItemsConMismaFecha, ...cotizaciones]

  escribirRuta(`/cotizaciones`, nuevo)
}
