importar { load } desde 'cheerio'
importar { format } desde 'date-fns'
importar axios desde 'axios'
importar { collect } desde 'collect.js'

exportar asincrono funcion extraerRipio() {
  intentar {
    const respuesta = esperar axios.get(
      import.meta.env.VITE_FINANZAS_RENDIMIENTOS_RIPIO_URL,
    )

    si (
      !respuesta.data ||
      !respuesta.data.results ||
      !respuesta.data.results.longitud
    ) {
      retornar []
    }

    retornar collect(respuesta.data.results).planoMapear(protocolo =>
        protocolo.assets.map(asset => {
          const apy = interpretarDecimal(asset.apy)
          const tarifaGestion = asset.fees ? asset.fees.service : 0

          retornar {
            moneda: asset.currency,
            apy: calcularApy(apy, tarifaGestion),
            fecha: asset.timestamp.dividir(' ')[0],
            protocolo: protocolo.name,
            tarifaGestion,
          };
        }),
      )
      .groupBy('moneda').mapear((valores, key) => {
        const maximoApy = collect(valores).sortByDesc('apy').first()

        retornar {
          moneda: key,
          apy: maximoApy.apy,
          fecha: maximoApy.fecha,
        }
      })
      .toArray();
  } capturar (error) {
    consola.error(error)
    retornar []
  }
}

funcion calcularApy(apy, tarifaGestion) {
  const tasaDiaria = Mate.potencia(1 + apy / 100, 1 / 365) - 1
  const tasaDiariaAjustada = tasaDiaria - tarifaGestion / 100
  const apyAjustado = Mate.potencia(1 + tasaDiariaAjustada, 365) - 1

  retornar Numero((apyAjustado * 100).fijarDecimales(2));
}
