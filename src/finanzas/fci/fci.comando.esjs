importar axios desde 'axios'
importar { collect } desde 'collect.js'
importar { format, subDays, addDays, isBefore como esAntes } desde 'date-fns'
importar { guardarCacfi } desde '@/finanzas/fci/guardarCacfi.esjs'
importar { escribirRuta, leerRuta } desde '@/utils/rutas.esjs'
importar { extraerCacfi } desde '@/extractores/cacfi.extractor.esjs'
importar { extraerSerieOtros } desde '@/finanzas/fci/extraerSerieOtros.esjs'

exportar porDefecto asincrono funcion () {
  esperar extraerSeriesDesdeCacfi()
  esperar extraerSerieOtros()
}

asincrono funcion extraerSeriesDesdeCacfi() {
  const series = ['mercadoDinero', 'rentaVariable', 'rentaFija', 'rentaMixta']

  const promesas = Promesa.todos(series.mapear(serie => ejecutarSerie(serie)))

  esperar promesas
}

asincrono funcion ejecutarSerie(serie) {
  const inicio = subDays(crear Fecha(), 10)
  const fin = addDays(crear Fecha(), 1)
  var fecha = inicio

  var itemsTodos = []

  mientras (esAntes(fecha, fin)) {
    const items = esperar extraerCacfi(serie, format(fecha, 'yyyy-MM-dd'))

    guardarCacfi(serie, items, fecha)

    fecha = addDays(fecha, 1)

    itemsTodos = itemsTodos.concatenar(items)
  }

  // Por cada fondo, buscar los ultimos 2 dias para guardarlos en penultimo y ultimo
  const penultimo = []
  const ultimo = []

  collect(itemsTodos)
    .groupBy('fondo').mapear((valores, key) => {
      const items = collect(valores)
        .sortByDesc('fecha')
        .unique('fecha')
        .toArray()

      si (items.longitud > 1) {
        penultimo.agregar(items[1])
        ultimo.agregar(items[0])
      } sino si (items.longitud === 1) {
        ultimo.agregar(items[0])
      }
    })

  esperar escribirRuta(`/finanzas/fci/${serie}/penultimo`, penultimo)

  esperar escribirRuta(`/finanzas/fci/${serie}/ultimo`, ultimo)

  retornar verdadero
}
