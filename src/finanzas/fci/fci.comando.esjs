importar { format, subDays, addDays, isBefore as esAntes } desde 'date-fns'
importar { guardarCacfi } desde '@/finanzas/fci/guardarCacfi.esjs'
importar { escribirRuta, leerRuta } desde '@/utils/rutas.esjs'
importar { extraerCacfi } desde '@/extractores/cacfi.extractor.esjs'
importar { collect } desde 'collect.js'
importar axios desde 'axios'

exportar porDefecto asincrono funcion () {
  esperar extraerSeriesDesdeCacfi()
  esperar extrearSerieOtros()
}

asincrono funcion extraerSeriesDesdeCacfi() {
  const series = [
    'mercadoDinero',
    'rentaVariable',
    'rentaFija',
    'rentaMixta',
  ]

  const promesas = Promesa.todos(series.mapear((serie) => ejecutarSerie(serie)))

  esperar promesas
}

asincrono funcion ejecutarSerie(serie) {
  const inicio = subDays(crear Fecha(), 10)
  const fin = addDays(crear Fecha(), 1)
  var fecha = inicio

  var itemsTodos = []

  mientras (esAntes(fecha, fin)) {
    const items = esperar extraerCacfi(serie, format(fecha, 'yyyy-MM-dd'))

    guardarCacfi(serie, items, fecha)

    fecha = addDays(fecha, 1)

    itemsTodos = itemsTodos.concatenar(items)
  }

  // Por cada fondo, buscar los ultimos 2 dias para guardarlos en penultimo y ultimo
  const penultimo = []
  const ultimo = []

  collect(itemsTodos)
    .groupBy('fondo')
    .mapear((valores, key) => {
      const items = collect(valores)
        .sortByDesc('fecha')
        .unique('fecha')
        .toArray()

      si (items.longitud > 1) {
        penultimo.agregar(items[1])
        ultimo.agregar(items[0])
      } sino si (items.longitud === 1) {
        ultimo.agregar(items[0])
      }
    })

  esperar escribirRuta(`/finanzas/fci/${serie}/penultimo`, penultimo)

  esperar escribirRuta(`/finanzas/fci/${serie}/ultimo`, ultimo)

  retornar verdadero
}

asincrono funcion extrearSerieOtros() {
  const fechaConBarras = format(crear Fecha(), 'yyyy/MM/dd')
  const ayerConBarras = format(subDays(crear Fecha(), 1), 'yyyy/MM/dd')

  const items = [
    esperar extraerNaranjaX(),
  ]

  esperar escribirRuta(`/finanzas/fci/otros/ultimo`, items)

  esperar escribirRuta(
    `/finanzas/fci/otros/penultimo`,
    leerRuta(`/finanzas/fci/otros/${ayerConBarras}`) || []
  )

  esperar escribirRuta(`/finanzas/fci/otros/${fechaConBarras}`, items)
}

asincrono funcion extraerNaranjaX() {
  intentar {
    const solicitarToken = esperar axios.post(
      import.meta.env.VITE_FINANZAS_PLAZOFIJO_NARANJAX_TOKEN_URL,
      {
        client_id: import.meta.env.VITE_FINANZAS_PLAZOFIJO_NARANJAX_TOKEN_CLIENT_ID,
        client_secret: import.meta.env.VITE_FINANZAS_PLAZOFIJO_NARANJAX_TOKEN_CLIENT_SECRET,
        audience: import.meta.env.VITE_FINANZAS_PLAZOFIJO_NARANJAX_TOKEN_AUDIENCE,
        grant_type: 'client_credentials',
        cache: true
      },
      {
        headers: {
          'Content-Type': 'application/json'
        }
      }
    )

    const token = solicitarToken.data.access_token

    const rendimientos = esperar axios.get(
      import.meta.env.VITE_FINANZAS_PLAZOFIJO_NARANJAX_URL,
      {
        headers: {
          Authorization: `Bearer ${token}`
        }
      }
    )

    retornar {
      fondo: "NARANJA X",
      tna: rendimientos.data.tna / 100,
      tea: rendimientos.data.tea / 100,
      tope: rendimientos.data.tope,
      fecha: format(crear Fecha(), 'yyyy-MM-dd')
    }
  } capturar (error) {
    consola.error(error)
    retornar {}
  }
}
